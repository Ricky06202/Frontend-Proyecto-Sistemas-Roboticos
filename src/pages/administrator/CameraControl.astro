---
/* CameraControl.astro */
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pruebas Prototipo - Mi Cámara</title>
    <!-- Enlace a Google Fonts para la tipografía Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <!-- Enlace a Font Awesome para los íconos -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="camera-container">
        <h1 class="text-center">Pruebas Prototipo</h1>
        <div class="camera-section">
            <h2>Vista de la Cámara</h2>
            <img id="cameraImage" src="" alt="Imagen de la cámara" class="camera-image">
        </div>
        <div class="button-container">
            <div class="control-panel">
                <button type="button" data-movement="-1" class="control-btn">
                    <i class="fas fa-arrow-left"></i> Izquierda
                </button>
                <button type="button" data-movement="1" class="control-btn">
                    <i class="fas fa-arrow-right"></i> Derecha
                </button>
                <button type="button" data-movement="-2" class="control-btn">
                    <i class="fas fa-arrow-up"></i> Arriba
                </button>
                <button type="button" data-movement="2" class="control-btn">
                    <i class="fas fa-arrow-down"></i> Abajo
                </button>
            </div>
        </div>
    </div>

    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f7f7f7;
            color: #333;
        }

        .camera-container {
            max-width: 600px;
            margin: 2rem auto;
            padding: 2rem;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        h1 {
            font-size: 2rem;
            font-weight: 600;
            color: #007BFF;
        }

        h2 {
            font-size: 1.5rem;
            font-weight: 500;
            margin-bottom: 1.5rem;
            color: #555;
        }

        .camera-image {
            max-width: 100%;
            height: auto;
            margin-bottom: 1.5rem;
            border-radius: 8px;
            border: 1px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }

        .button-container {
            margin-top: 2rem;
        }

        .control-panel {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .control-btn {
            padding: 12px;
            background-color: #007BFF;
            color: white;
            font-size: 18px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .control-btn:hover {
            background-color: #0056b3;
            transform: scale(1.1);
        }

        .control-btn:active {
            background-color: #004085;
            transform: scale(1);
        }

        .control-btn i {
            font-size: 20px;
        }
    </style>

    <script>
        // Definir interfaces y tipos
        interface CameraData {
            image: string;
        }

        type MovementValue = '-2' | '-1' | '0' | '1' | '2';

        // Client-side JavaScript with TypeScript
        document.addEventListener("DOMContentLoaded", function() {
            // WebSocket para recibir imágenes
            const cameraSocket = new WebSocket('ws://asiscan.sytes.net/ws/camera/');
            const cameraImage = document.getElementById('cameraImage') as HTMLImageElement;
            
            if (!cameraImage) {
                console.error('No se encontró el elemento de imagen');
                return;
            }

            cameraSocket.onopen = () => {
                console.log("Conexión WebSocket establecida");
            };

            cameraSocket.onerror = (e: Event) => {
                console.error("Error en WebSocket:", e);
            };
            
            cameraSocket.onclose = (e: CloseEvent) => {
                console.log("Conexión WebSocket cerrada:", e);
            };
            
            cameraSocket.onmessage = (e: MessageEvent) => {
                try {
                    const data = JSON.parse(e.data) as CameraData;
                    const imageSrc = "data:image/png;base64," + data.image;
                    cameraImage.src = imageSrc;
                } catch (error) {
                    console.error("Error al procesar mensaje:", error);
                }
            };

            // Control de botones
            const buttons = document.querySelectorAll<HTMLButtonElement>('.control-btn');
            let inactivityTimeout: number | undefined;

            async function sendValueToServer(movement: MovementValue): Promise<void> {
                try {
                    const response = await fetch('http://asiscan.sytes.net/cam/display/enviar_valor_servos/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `movimiento=${movement}`
                    });
                    const data = await response.json();
                    console.log('Respuesta:', data);
                } catch (error) {
                    console.error('Error:', error);
                }
            }

            function resetInactivityTimeout(): void {
                if (inactivityTimeout) {
                    clearTimeout(inactivityTimeout);
                }
                inactivityTimeout = window.setTimeout(() => {
                    sendValueToServer('0');
                }, 1000);
            }

            buttons.forEach(button => {
                button.addEventListener('mousedown', function(this: HTMLButtonElement) {
                    const movement = this.getAttribute('data-movement') as MovementValue;
                    if (movement) {
                        sendValueToServer(movement);
                        resetInactivityTimeout();
                    }
                });

                button.addEventListener('mouseup', () => {
                    resetInactivityTimeout();
                });
            });

            resetInactivityTimeout();
        });
    </script>
</body>
</html>
